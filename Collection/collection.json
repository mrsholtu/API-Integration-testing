{
	"info": {
		"_postman_id": "672e089f-5a33-4e07-931d-3d561a7caec7",
		"name": "API Integration testing showkat",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40659331"
	},
	"item": [
		{
			"name": "Login Test",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.collectionVariables.set(\"token\", token)\r",
									"pm.environment.set(\"token\", token)\r",
									"\r",
									"pm.test(\"check if login is successful\",()=>{\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
									"})\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@roadtocareer.net\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.collectionVariables.set(\"token\", token)\r",
									"pm.environment.set(\"token\", token)\r",
									"\r",
									"pm.test(\"if admin inputs wrong creds, should not successful logged in \",()=>{\r",
									"    pm.expect(jsonData.message).includes(\"User not found\")\r",
									"})\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@roadcareer.net\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.collectionVariables.set(\"token\", token)\r",
									"pm.environment.set(\"token\", token)\r",
									"\r",
									"pm.test(\"if admin inputs wrong creds, should not successful logged in \",()=>{\r",
									"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
									"})\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@roadtocareer.net\",\r\n    \"password\": \"1236\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent Create test",
			"item": [
				{
					"name": "Agent Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomId=_.random(666666,888888);\r",
									"let prefix=\"01717\";\r",
									"let phoneNumber= prefix+randomId;\r",
									"\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\",phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let token= jsonData.token;\r",
									"let userId=jsonData.user.id;\r",
									"let userEmail= jsonData.user.email;\r",
									"\r",
									"pm.collectionVariables.set(\"token\", token)\r",
									"pm.environment.set(\"token\", token)\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "bearer {{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"name\": \"Janifa {{$randomLastName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"1234\",\r\n            \"phone_number\": \"{{phoneNumber}}\",\r\n            \"nid\": \"126756891\",\r\n            \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Same Agent Multiple",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if same user can create multiple times\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "bearer {{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Tanzim Stanton\",\r\n        \"email\": \"Gina_Marquardt@yahoo.com\",\r\n        \"password\": \"1234\",\r\n        \"phone_number\": \"01717757715\",\r\n        \"nid\": \"126756891\",\r\n        \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1st Customer create test",
			"item": [
				{
					"name": "Customer create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomId=_.random(666666,888888);\r",
									"let prefix=\"01717\";\r",
									"let phoneNumber= prefix+randomId;\r",
									"\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\",phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let userId=jsonData.user.id;\r",
									"let userEmail= jsonData.user.email;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"pm.environment.set(\"userId\",userId);\r",
									"pm.environment.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"name\": \"shorup {{$randomLastName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"1234\",\r\n            \"phone_number\": \"{{phoneNumber}}\",\r\n            \"nid\": \"126756891\",\r\n            \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "same customer multiple",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if same user can create multiple times\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Safwan Gislason\",\r\n        \"email\": \"Shana46@yahoo.com\",\r\n        \"password\": \"1234\",\r\n        \"phone_number\": \"01717881190\",\r\n        \"nid\": \"126756891\",\r\n        \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2nd customer create test",
			"item": [
				{
					"name": "Customer create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomId=_.random(666666,888888);\r",
									"let prefix=\"01717\";\r",
									"let phoneNumber= prefix+randomId;\r",
									"\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\",phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let userId=jsonData.user.id;\r",
									"let userEmail= jsonData.user.email;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"pm.environment.set(\"userId\",userId);\r",
									"pm.environment.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"name\": \"Alauddin {{$randomLastName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"1234\",\r\n            \"phone_number\": \"{{phoneNumber}}\",\r\n            \"nid\": \"126756891\",\r\n            \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "same customer multiple",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if same user can create multiple times\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Safwan Carter\",\r\n        \"email\": \"Derek53@yahoo.com\",\r\n        \"password\": \"1234\",\r\n        \"phone_number\": \"01717884464\",\r\n        \"nid\": \"126756891\",\r\n        \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant create test",
			"item": [
				{
					"name": "Merchant create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomId=_.random(666666,888888);\r",
									"let prefix=\"01717\";\r",
									"let phoneNumber= prefix+randomId;\r",
									"\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\",phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let userId=jsonData.user.id;\r",
									"let userEmail= jsonData.user.email;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"pm.environment.set(\"userId\",userId);\r",
									"pm.environment.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"name\": \"Adi {{$randomLastName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"1234\",\r\n            \"phone_number\": \"{{phoneNumber}}\",\r\n            \"nid\": \"126756891\",\r\n            \"role\": \"Merchant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "same customer multiple",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if same user can create multiple times\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Adi Bahringer\",\r\n        \"email\": \"Kennith.Keeling@gmail.com\",\r\n        \"password\": \"1234\",\r\n        \"phone_number\": \"01717845212\",\r\n        \"nid\": \"126756891\",\r\n        \"role\": \"Merchant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Syst to Agent Trans..",
			"item": [
				{
					"name": "Valid Deposit S to A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if transaction amount is correct\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"01717762793\",\r\n    \"amount\":1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid Deposit S to A Max amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if transaction amount is correct\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"01717873602\",\r\n    \"amount\":10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid max amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if transaction amount is correct\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Limit exceeded. You can deposit a maximum of 10000.00 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"01717799209\",\r\n    \"amount\":11000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if agent account is valid\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"InvalidAccount\",\r\n    \"amount\":10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lower invalid amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if transaction amount is correct\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Minimum deposit amount is 10 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"01717801349\",\r\n    \"amount\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent to Customer",
			"item": [
				{
					"name": "Valid Deposit A to C1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if Sender has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717807386\",\r\n    \"to_account\":\"01717881190\",\r\n    \"amount\":100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid Deposit max amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if Sender has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717873602\",\r\n    \"to_account\":\"01717835874\",\r\n    \"amount\":10000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid Deposit A to C2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if Sender has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717883228\",\r\n    \"to_account\":\"01717694482\",\r\n    \"amount\":100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if Sender has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717883228\",\r\n    \"to_account\":\"01717694482\",\r\n    \"amount\":100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lower invalid amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if transaction amount is correct\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Minimum deposit amount is 10 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"01717888021\",\r\n    \"to_account\":\"01717762793\",\r\n    \"amount\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit from invalid agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if agent account is valid\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"24566566\",\r\n    \"amount\":10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent balance",
			"item": [
				{
					"name": "Agent balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01717816135",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01717816135"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insufficient balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if transaction amount is correct\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Minimum deposit amount is 10 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717694105\",\r\n    \"to_account\":\"01717688875\",\r\n    \"amount\":11000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Send Money",
			"item": [
				{
					"name": "Send money C1 to C2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user inputs valid information\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Send money successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717881190\",\r\n    \"to_account\":\"01717694482\",\r\n    \"amount\":50\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send money to Invalid customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user inputs valid information\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717881190\",\r\n    \"to_account\":\"02421545\",\r\n    \"amount\":50\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "max amount of available balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user inputs valid amount\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717881190\",\r\n    \"to_account\":\"01717694482\",\r\n    \"amount\":245\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "lower than min amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user inputs valid amount\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Minimum amount is 10 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717881190\",\r\n    \"to_account\":\"01717694482\",\r\n    \"amount\":5\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Withdraw from Agent",
			"item": [
				{
					"name": "C1 to Agent sufficient valid amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if customer has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Withdraw successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717881190\",\r\n    \"to_account\":\"01717807386\",\r\n    \"amount\":100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if customer is exist\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"To Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717881190\",\r\n    \"to_account\":\"55542343\",\r\n    \"amount\":100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if customer is exist\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"From Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"7544124\",\r\n    \"to_account\":\"01717807386\",\r\n    \"amount\":100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "C sufficient max amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if customer has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717835874\",\r\n    \"to_account\":\"01717807386\",\r\n    \"amount\":10000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "sufficient invalid lower amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if customer has sufficient balance\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Minimum withdraw amount is 10 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"from_account\":\"01717835874\",\r\n    \"to_account\":\"01717807386\",\r\n    \"amount\":9\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "customer deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if sender role has access to deposit\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Only Agent can deposit money\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"01717694482\",\r\n    \"to_account\":\"01717845212\",\r\n    \"amount\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer's balance and transaction statement by trnxId",
			"item": [
				{
					"name": "C1 Transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Transaction list\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/01717881190",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"01717881190"
							]
						}
					},
					"response": []
				},
				{
					"name": "c1 balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01717881190",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01717881190"
							]
						}
					},
					"response": []
				},
				{
					"name": "c2 balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01717881190",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01717881190"
							]
						}
					},
					"response": []
				},
				{
					"name": "C2 Transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Transaction list\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/01717694482",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"01717694482"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid User Transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/24579634",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"24579634"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant Payment from C2",
			"item": [
				{
					"name": "Valid Payment with sufficient amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if sender has sufficient amount\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Payment successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"01717694482\",\r\n    \"to_account\":\"01717845212\",\r\n    \"amount\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment to invalid merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if account is exist\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"To Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"01717694482\",\r\n    \"to_account\":\"54845438\",\r\n    \"amount\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment from invalid customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"let token= jsonData.token;\r",
									"pm.test(\"check if account is exist\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"From Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"04624576\",\r\n    \"to_account\":\"01717845212\",\r\n    \"amount\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant balance",
			"item": [
				{
					"name": "Merchant balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01717845212",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01717845212"
							]
						}
					},
					"response": []
				},
				{
					"name": "Merchant Transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check if user has transactions\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Transaction list\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Partner Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/01717881190",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"01717881190"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": " http://dmoney.roadtocareer.net"
		},
		{
			"key": "Partner Key",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "phoneNumber",
			"value": "01717823641"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	]
}